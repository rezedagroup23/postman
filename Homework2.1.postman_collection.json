{
	"info": {
		"_postman_id": "4d66d527-c25e-441e-99d2-a56d3f172cbe",
		"name": "Homework2.1",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Homework2.1",
			"item": [
				{
					"name": "first",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
									"});\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}first?name=Rezeda&age=34",
							"host": [
								"{{url}}first"
							],
							"query": [
								{
									"key": "name",
									"value": "Rezeda"
								},
								{
									"key": "age",
									"value": "34"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"let resp_name = jsonData.name\r",
									"let resp_age = jsonData.age\r",
									"let resp_salary = jsonData.salary\r",
									"let resp_salary_1_5 = jsonData.u_salary_1_5_year\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
									"pm.test(\"name\", function () {\r",
									"        pm.expect(resp_name).to.eql(\"Rezeda\");\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
									"pm.test(\"age\", function () {\r",
									"        pm.expect(resp_age).to.eql(\"34\");\r",
									"});\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
									"pm.test(\"salary\", function () {\r",
									"       pm.expect(resp_salary).to.eql(1000);\r",
									"});\r",
									"\r",
									"//Спарсить request.\r",
									"let req_data = request.data;\r",
									"\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"name_request\", function () {\r",
									"       pm.expect(resp_name).to.eql(req_data.name);\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"pm.test(\"age_request\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_data.age);\r",
									"});\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"salary_request\", function () {    \r",
									"    pm.expect(resp_salary).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"\r",
									"//Вывести в консоль параметр family из response.\r",
									"console.log(jsonData.family);\r",
									"\r",
									"\r",
									"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
									"pm.test(\"salary_1_5\", function () {\r",
									"       pm.expect(resp_salary_1_5).to.eql+(resp_salary)*4;\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "Rezeda",
									"type": "text"
								},
								{
									"key": "age",
									"value": "34",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "1000",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}user_info_3",
							"host": [
								"{{url}}user_info_3"
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json\r",
									"//let jsonData = pm.request.url.query.toObject;\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"let resp_name = jsonData.name\r",
									"let resp_age = jsonData.age\r",
									"let resp_salary = jsonData.salary\r",
									"\r",
									"//Спарсить request\r",
									"let req_data = pm.request.url.query.toObject();\r",
									"\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"name_request\", function () {\r",
									"       pm.expect(resp_name).to.eql(req_data.name);\r",
									"});\r",
									"\r",
									"\r",
									"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
									"\r",
									"pm.test(\"age_request\", function () {\r",
									"    pm.expect(resp_age).to.eql(req_data.age);\r",
									"});\r",
									"\r",
									"\r",
									"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
									"pm.test(\"salary_request\", function () {    \r",
									"    pm.expect(resp_salary).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"//Вывести в консоль параметр family из response\r",
									"console.log(jsonData.family);\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры name.\r",
									"pm.test(\"Check dog has name\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
									"});\r",
									"\r",
									"//Проверить, что у параметра dog есть параметры age.\r",
									"pm.test(\"Check dog has age\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
									"});\r",
									"\r",
									"//Проверить, что параметр name имеет значение Luky.\r",
									"pm.test(\"Check dog's name\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
									"});\r",
									"\r",
									"\r",
									"//Проверить, что параметр age имеет значение 4.\r",
									"pm.test(\"Check dog's age\", function () {\r",
									"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}object_info_3?name=Rezeda&age=34&salary=1000",
							"host": [
								"{{url}}object_info_3"
							],
							"query": [
								{
									"key": "name",
									"value": "Rezeda"
								},
								{
									"key": "age",
									"value": "34"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "object_info_4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json.\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"\r",
									"let resp_name = jsonData.name\r",
									"let resp_age = jsonData.age\r",
									"let resp_salary = jsonData.salary\r",
									"\r",
									"//Спарсить request.\r",
									"let req_data = pm.request.url.query.toObject();\r",
									"\r",
									"\r",
									"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
									"pm.test(\"name_request\", function () {\r",
									"       pm.expect(resp_name).to.eql(req_data.name);\r",
									"});\r",
									"\r",
									"//Проверить, что age в ответе равно age из request (age забрать из request.)\r",
									"pm.test(\"age_request\", function () {\r",
									"    pm.expect(resp_age).to.eql(+req_data.age);\r",
									"});\r",
									"\r",
									"//Вывести в консоль параметр salary из request.\r",
									"console.log(\"salary of request\",req_data.salary);\r",
									"\r",
									"//Вывести в консоль параметр salary из response.\r",
									"console.log(\"salary of response\",resp_salary);\r",
									"\r",
									"//Вывести в консоль 0-й элемент параметра salary из response.\r",
									"console.log(\"salary of response 0\",resp_salary[0]);\r",
									"\r",
									"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
									"console.log(\"salary of response 1\",resp_salary[1]);\r",
									"\r",
									"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
									"console.log(\"salary of response 2\",resp_salary[2]);\r",
									"\r",
									"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"salary_request[0]\", function () {    \r",
									"    pm.expect(resp_salary[0]).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"salary_request[1]\", function () {    \r",
									"    pm.expect(resp_salary[1]).to.eql+(req_data.salary*2);\r",
									"});\r",
									"\r",
									"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
									"pm.test(\"salary_request[2]\", function () {    \r",
									"    pm.expect(resp_salary[2]).to.eql+(req_data.salary*3);\r",
									"});\r",
									"\r",
									"\r",
									"//Передать в окружение переменную salary\r",
									"pm.environment.set(\"salary\", resp_salary[0]);\r",
									"\r",
									"//Передать в окружение переменную name\r",
									"pm.environment.set(\"name\", resp_name);\r",
									"\r",
									"//Передать в окружение переменную age\r",
									"pm.environment.set(\"age\", resp_age);\r",
									"\r",
									"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
									"for (let i=0; i < resp_salary.length; i++) {\r",
									"    console.log(\"salary list\", resp_salary[i])\r",
									"}\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}object_info_4?name=Rezeda&age=34&salary=1000",
							"host": [
								"{{url}}object_info_4"
							],
							"query": [
								{
									"key": "name",
									"value": "Rezeda"
								},
								{
									"key": "age",
									"value": "34"
								},
								{
									"key": "salary",
									"value": "1000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "user_info_2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Статус код 200\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"//Спарсить response body в json\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"//Cпарсить request.\r",
									"let req_data = request.data;\r",
									"\r",
									"\r",
									"//Проверить, что json response имеет параметр start_qa_salary\r",
									"pm.test(\"Json has start_qa_salary\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
									"pm.test(\"Json has qa_salary_after_6_months\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
									"pm.test(\"Json has qa_salary_after_12_months\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
									"pm.test(\"Json has qa_salary_after_1.5_year\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
									"});\r",
									"\r",
									"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
									"pm.test(\"Json has qa_salary_after_3.5_years\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
									"});\r",
									"//Проверить, что json response имеет параметр person\r",
									"pm.test(\"Json has person\", function () {\r",
									"    pm.expect(jsonData).to.have.property(\"person\");\r",
									"});\r",
									"\r",
									"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
									"pm.test(\"check start_qa_salary\", function () {    \r",
									"    pm.expect(jsonData.start_qa_salary).to.eql(+req_data.salary);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
									"pm.test(\"check qa_salary_after_6_months\", function () {    \r",
									"    pm.expect(jsonData.qa_salary_after_6_months).to.eql+(req_data.salary*2);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
									"pm.test(\"check qa_salary_after_12_months\", function () {    \r",
									"    pm.expect(jsonData.qa_salary_after_12_months).to.eql+(req_data.salary*2.7);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
									"pm.test(\"check qa_salary_after_1.5_year\", function () {    \r",
									" pm.expect(jsonData[\"qa_salary_after_1.5_years\"]).to.eql+(req_data.salary*3.3);\r",
									"});\r",
									"\r",
									"\r",
									"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
									"pm.test(\"check qa_salary_after_3.5_years\", function () {    \r",
									"  pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql+(req_data.salary*3.8);\r",
									"});\r",
									"\r",
									"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
									"pm.test(\"check person salary\", function () {    \r",
									"    pm.expect(jsonData.person.u_name[1]).to.eql+(req_data.salary);\r",
									"});\r",
									"\r",
									"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
									"pm.test(\"check person age\", function () {    \r",
									"    pm.expect(jsonData.person.u_age).to.eql(+req_data.age);\r",
									"});\r",
									"\r",
									"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
									"pm.test(\"check u_salary_5_years\", function () {    \r",
									"    pm.expect(jsonData.u_salary_5_years).to.eql+(req_data.salary*4.2);\r",
									"});\r",
									"\r",
									"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
									"//for (let i=0; i < jsonData.person.length; i++) {\r",
									"   //     console.log(\"person list\", jsonData.person[i])\r",
									"//}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "name",
									"value": "{{name}}",
									"type": "text"
								},
								{
									"key": "age",
									"value": "{{age}}",
									"type": "text"
								},
								{
									"key": "salary",
									"value": "{{salary}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}user_info_2",
							"host": [
								"{{url}}user_info_2"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}